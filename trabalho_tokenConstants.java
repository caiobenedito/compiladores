/* Generated By:JavaCC: Do not edit this line. trabalho_tokenConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface trabalho_tokenConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PROGRAMA = 4;
  /** RegularExpression Id. */
  int IF = 5;
  /** RegularExpression Id. */
  int ELSE = 6;
  /** RegularExpression Id. */
  int ELSEIF = 7;
  /** RegularExpression Id. */
  int FOR = 8;
  /** RegularExpression Id. */
  int SWITCH = 9;
  /** RegularExpression Id. */
  int CASE = 10;
  /** RegularExpression Id. */
  int BREAK = 11;
  /** RegularExpression Id. */
  int DEFAUL = 12;
  /** RegularExpression Id. */
  int DO = 13;
  /** RegularExpression Id. */
  int WHILE = 14;
  /** RegularExpression Id. */
  int WRITELN = 15;
  /** RegularExpression Id. */
  int WRITE = 16;
  /** RegularExpression Id. */
  int READ = 17;
  /** RegularExpression Id. */
  int READLN = 18;
  /** RegularExpression Id. */
  int ARRAY = 19;
  /** RegularExpression Id. */
  int ASM = 20;
  /** RegularExpression Id. */
  int BEGIN = 21;
  /** RegularExpression Id. */
  int CONST = 22;
  /** RegularExpression Id. */
  int CONSTRUCTOR = 23;
  /** RegularExpression Id. */
  int DESTRUCTOR = 24;
  /** RegularExpression Id. */
  int DIV = 25;
  /** RegularExpression Id. */
  int DOWNTO = 26;
  /** RegularExpression Id. */
  int END = 27;
  /** RegularExpression Id. */
  int FILE = 28;
  /** RegularExpression Id. */
  int FUNCTION = 29;
  /** RegularExpression Id. */
  int GOTO = 30;
  /** RegularExpression Id. */
  int IMPLENTATION = 31;
  /** RegularExpression Id. */
  int IN = 32;
  /** RegularExpression Id. */
  int INHERITED = 33;
  /** RegularExpression Id. */
  int INLINE = 34;
  /** RegularExpression Id. */
  int INTERFACE = 35;
  /** RegularExpression Id. */
  int LABEL = 36;
  /** RegularExpression Id. */
  int MOD = 37;
  /** RegularExpression Id. */
  int NIL = 38;
  /** RegularExpression Id. */
  int NOT = 39;
  /** RegularExpression Id. */
  int OBJECT = 40;
  /** RegularExpression Id. */
  int OF = 41;
  /** RegularExpression Id. */
  int OPERATOR = 42;
  /** RegularExpression Id. */
  int PACKED = 43;
  /** RegularExpression Id. */
  int PROCEDURE = 44;
  /** RegularExpression Id. */
  int RECORD = 45;
  /** RegularExpression Id. */
  int REINTRODUCE = 46;
  /** RegularExpression Id. */
  int REPEAT = 47;
  /** RegularExpression Id. */
  int SELF = 48;
  /** RegularExpression Id. */
  int SET = 49;
  /** RegularExpression Id. */
  int SHL = 50;
  /** RegularExpression Id. */
  int SHR = 51;
  /** RegularExpression Id. */
  int STRING = 52;
  /** RegularExpression Id. */
  int THEN = 53;
  /** RegularExpression Id. */
  int TO = 54;
  /** RegularExpression Id. */
  int TYPE = 55;
  /** RegularExpression Id. */
  int UNIT = 56;
  /** RegularExpression Id. */
  int UNTIL = 57;
  /** RegularExpression Id. */
  int USES = 58;
  /** RegularExpression Id. */
  int VAR = 59;
  /** RegularExpression Id. */
  int WITH = 60;
  /** RegularExpression Id. */
  int XOR = 61;
  /** RegularExpression Id. */
  int AS = 62;
  /** RegularExpression Id. */
  int CLASS = 63;
  /** RegularExpression Id. */
  int DISPINTERFACE = 64;
  /** RegularExpression Id. */
  int EXCEPT = 65;
  /** RegularExpression Id. */
  int EXPORTS = 66;
  /** RegularExpression Id. */
  int FINALIZATION = 67;
  /** RegularExpression Id. */
  int FINALLY = 68;
  /** RegularExpression Id. */
  int INITIALIZATION = 69;
  /** RegularExpression Id. */
  int IS = 70;
  /** RegularExpression Id. */
  int LIBRAY = 71;
  /** RegularExpression Id. */
  int ON = 72;
  /** RegularExpression Id. */
  int PROPERTY = 73;
  /** RegularExpression Id. */
  int RAISE = 74;
  /** RegularExpression Id. */
  int RESOURCESTRING = 75;
  /** RegularExpression Id. */
  int THREADVAR = 76;
  /** RegularExpression Id. */
  int TRY = 77;
  /** RegularExpression Id. */
  int ABSTRACT = 78;
  /** RegularExpression Id. */
  int ALIAS = 79;
  /** RegularExpression Id. */
  int ASSEMBLER = 80;
  /** RegularExpression Id. */
  int BITPACKED = 81;
  /** RegularExpression Id. */
  int CDECL = 82;
  /** RegularExpression Id. */
  int CONTINUE = 83;
  /** RegularExpression Id. */
  int CPPDECL = 84;
  /** RegularExpression Id. */
  int CVAR = 85;
  /** RegularExpression Id. */
  int DEPRECATED = 86;
  /** RegularExpression Id. */
  int DYNAMIC = 87;
  /** RegularExpression Id. */
  int ENUMERATOR = 88;
  /** RegularExpression Id. */
  int EXPERIMENTAL = 89;
  /** RegularExpression Id. */
  int EXPORT = 90;
  /** RegularExpression Id. */
  int EXTERNAL = 91;
  /** RegularExpression Id. */
  int FAR = 92;
  /** RegularExpression Id. */
  int FAR16 = 93;
  /** RegularExpression Id. */
  int FORWARD = 94;
  /** RegularExpression Id. */
  int GENERIC = 95;
  /** RegularExpression Id. */
  int HELPER = 96;
  /** RegularExpression Id. */
  int IMPLEMENTS = 97;
  /** RegularExpression Id. */
  int INDEX = 98;
  /** RegularExpression Id. */
  int INTERRUPT = 99;
  /** RegularExpression Id. */
  int IOCHECK = 100;
  /** RegularExpression Id. */
  int LOCAL = 101;
  /** RegularExpression Id. */
  int MESSAGE = 102;
  /** RegularExpression Id. */
  int NAME = 103;
  /** RegularExpression Id. */
  int NEAR = 104;
  /** RegularExpression Id. */
  int NODEFAULT = 105;
  /** RegularExpression Id. */
  int NORETURN = 106;
  /** RegularExpression Id. */
  int NOSTACKFRAME = 107;
  /** RegularExpression Id. */
  int OLDFPCCALL = 108;
  /** RegularExpression Id. */
  int OTHERWISE = 109;
  /** RegularExpression Id. */
  int OVERLOAD = 110;
  /** RegularExpression Id. */
  int OVERRIDE = 111;
  /** RegularExpression Id. */
  int PASCAL = 112;
  /** RegularExpression Id. */
  int PLATFORM = 113;
  /** RegularExpression Id. */
  int PRIVATE = 114;
  /** RegularExpression Id. */
  int PROTECTED = 115;
  /** RegularExpression Id. */
  int PUBLIC = 116;
  /** RegularExpression Id. */
  int PUBLISHED = 117;
  /** RegularExpression Id. */
  int REGISTER = 118;
  /** RegularExpression Id. */
  int RESULT = 119;
  /** RegularExpression Id. */
  int SAFECALL = 120;
  /** RegularExpression Id. */
  int SAVEREGISTERS = 121;
  /** RegularExpression Id. */
  int SOFTFLOAT = 122;
  /** RegularExpression Id. */
  int SPECIALIZE = 123;
  /** RegularExpression Id. */
  int STATIC = 124;
  /** RegularExpression Id. */
  int STDCALL = 125;
  /** RegularExpression Id. */
  int STORED = 126;
  /** RegularExpression Id. */
  int STRICT = 127;
  /** RegularExpression Id. */
  int UNALIGNED = 128;
  /** RegularExpression Id. */
  int UNIMPLEMENTED = 129;
  /** RegularExpression Id. */
  int VARARGS = 130;
  /** RegularExpression Id. */
  int VIRTUAL = 131;
  /** RegularExpression Id. */
  int ASIGNACION = 132;
  /** RegularExpression Id. */
  int PLUS = 133;
  /** RegularExpression Id. */
  int MINUS = 134;
  /** RegularExpression Id. */
  int MULTIPLY = 135;
  /** RegularExpression Id. */
  int DIVIDE = 136;
  /** RegularExpression Id. */
  int INCR = 137;
  /** RegularExpression Id. */
  int DECR = 138;
  /** RegularExpression Id. */
  int LPAREN = 139;
  /** RegularExpression Id. */
  int RPAREN = 140;
  /** RegularExpression Id. */
  int LBRACE = 141;
  /** RegularExpression Id. */
  int RBRACE = 142;
  /** RegularExpression Id. */
  int ASPAS = 143;
  /** RegularExpression Id. */
  int LBRACKET = 144;
  /** RegularExpression Id. */
  int RBRACKET = 145;
  /** RegularExpression Id. */
  int SEMICOLON = 146;
  /** RegularExpression Id. */
  int COMMA = 147;
  /** RegularExpression Id. */
  int DOT = 148;
  /** RegularExpression Id. */
  int TDOT = 149;
  /** RegularExpression Id. */
  int EQ = 150;
  /** RegularExpression Id. */
  int LE = 151;
  /** RegularExpression Id. */
  int GE = 152;
  /** RegularExpression Id. */
  int NE = 153;
  /** RegularExpression Id. */
  int OR = 154;
  /** RegularExpression Id. */
  int AND = 155;
  /** RegularExpression Id. */
  int COMENTARIO_SIMPLES = 156;
  /** RegularExpression Id. */
  int COMENTARIO_MULTIPLAS_LINHAS = 157;
  /** RegularExpression Id. */
  int TYPES = 158;
  /** RegularExpression Id. */
  int NUMBER = 159;
  /** RegularExpression Id. */
  int FLOAT_NUM = 160;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 161;
  /** RegularExpression Id. */
  int IDENTIFIER = 162;
  /** RegularExpression Id. */
  int CADENA = 163;
  /** RegularExpression Id. */
  int ID = 164;
  /** RegularExpression Id. */
  int QUOTED = 165;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "<token of kind 2>",
    "<token of kind 3>",
    "\"Program \"",
    "\"if \"",
    "\"else \"",
    "\"else if \"",
    "\"for \"",
    "\"ialternativa \"",
    "\"Case \"",
    "\"itermina \"",
    "\"ipredef \"",
    "\"Do \"",
    "\"repeat \"",
    "<WRITELN>",
    "<WRITE>",
    "<READ>",
    "<READLN>",
    "\"array \"",
    "\"asm\"",
    "<BEGIN>",
    "\"const \"",
    "\"constructor \"",
    "\"destructor \"",
    "\"div \"",
    "\"downto \"",
    "<END>",
    "\"file\"",
    "\"function \"",
    "\"goto\"",
    "\"implentation\"",
    "\"in\"",
    "\"inherited\"",
    "\"inline\"",
    "\"interface\"",
    "\"label\"",
    "\"mod\"",
    "\"nil\"",
    "\"not\"",
    "\"object\"",
    "\"of\"",
    "\"operator\"",
    "\"packed\"",
    "\"procedure\"",
    "\"record\"",
    "\"reintroduce\"",
    "\"repeat\"",
    "\"self\"",
    "\"set\"",
    "\"shl\"",
    "\"shr\"",
    "\"string\"",
    "\"then\"",
    "\"to\"",
    "\"type\"",
    "\"unit\"",
    "\"until\"",
    "\"uses\"",
    "<VAR>",
    "\"with\"",
    "\"xor\"",
    "\"as\"",
    "\"class\"",
    "\"dispinterface\"",
    "\"except\"",
    "\"exports\"",
    "\"finalization\"",
    "\"finally\"",
    "\"initialization\"",
    "\"is\"",
    "\"libray\"",
    "\"on\"",
    "\"property\"",
    "\"raise\"",
    "\"resourcestring\"",
    "\"threadvar\"",
    "\"try\"",
    "\"abstract \"",
    "\"alias\"",
    "\"assembler\"",
    "\"bitpacked\"",
    "\"cdecl\"",
    "\"continue\"",
    "\"cppdecl\"",
    "\"cvar\"",
    "\"deprecated\"",
    "\"dynamic\"",
    "\"enumerator\"",
    "\"experimental\"",
    "\"export\"",
    "\"external\"",
    "\"far\"",
    "\"far16\"",
    "\"forward\"",
    "\"generic\"",
    "\"helper\"",
    "\"implements\"",
    "\"index\"",
    "\"interrupt\"",
    "\"iocheck\"",
    "\"local\"",
    "\"message\"",
    "\"name\"",
    "\"near\"",
    "\"nodefault\"",
    "\"noreturn\"",
    "\"nostackframe\"",
    "\"oldfpccall\"",
    "\"otherwise\"",
    "\"overload\"",
    "\"override\"",
    "\"pascal\"",
    "\"platform\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"published\"",
    "\"register\"",
    "\"result\"",
    "\"safecall\"",
    "\"saveregisters\"",
    "\"softfloat\"",
    "\"specialize\"",
    "\"static\"",
    "\"stdcall\"",
    "\"stored\"",
    "\"strict\"",
    "\"unaligned\"",
    "\"unimplemented\"",
    "\"varargs\"",
    "\"virtual\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"++\"",
    "\"--\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"\\\'\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "<COMENTARIO_SIMPLES>",
    "<COMENTARIO_MULTIPLAS_LINHAS>",
    "<TYPES>",
    "<NUMBER>",
    "<FLOAT_NUM>",
    "<CHARACTER_LITERAL>",
    "<IDENTIFIER>",
    "<CADENA>",
    "<ID>",
    "<QUOTED>",
  };

}
