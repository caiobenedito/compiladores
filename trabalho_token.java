/* Generated By:JavaCC: Do not edit this line. trabalho_token.java */
public class trabalho_token implements trabalho_tokenConstants {
        public static void main( String[] args )throws ParseException
        {
                try
                {
                        trabalho_token analizador = new trabalho_token (System.in);
                        analizador.Programa() ;
                }
                catch (ParseException e)
                {
                        System.out.println(e.getMessage());
                        System.out.println("Analisador: erro encontrado na analise");

        }
}

  static final public void Programa() throws ParseException {
 System.out.print("function - Programa \u005cn");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROGRAMA:
      case IF:
      case ELSE:
      case ELSEIF:
      case FOR:
      case SWITCH:
      case CASE:
      case BREAK:
      case DEFAUL:
      case DO:
      case WHILE:
      case WRITELN:
      case WRITE:
      case READ:
      case READLN:
      case ARRAY:
      case ASM:
      case BEGIN:
      case CONST:
      case CONSTRUCTOR:
      case DESTRUCTOR:
      case DIV:
      case DOWNTO:
      case END:
      case FILE:
      case FUNCTION:
      case GOTO:
      case IMPLENTATION:
      case IN:
      case INHERITED:
      case INLINE:
      case INTERFACE:
      case LABEL:
      case MOD:
      case NIL:
      case NOT:
      case OBJECT:
      case OF:
      case OPERATOR:
      case PACKED:
      case PROCEDURE:
      case RECORD:
      case REINTRODUCE:
      case REPEAT:
      case SELF:
      case SET:
      case SHL:
      case SHR:
      case STRING:
      case THEN:
      case TO:
      case TYPE:
      case UNIT:
      case UNTIL:
      case USES:
      case VAR:
      case WITH:
      case XOR:
      case AS:
      case CLASS:
      case DISPINTERFACE:
      case EXCEPT:
      case EXPORTS:
      case FINALIZATION:
      case FINALLY:
      case INITIALIZATION:
      case IS:
      case LIBRAY:
      case ON:
      case PROPERTY:
      case RAISE:
      case RESOURCESTRING:
      case THREADVAR:
      case TRY:
      case ABSTRACT:
      case ALIAS:
      case ASSEMBLER:
      case BITPACKED:
      case CDECL:
      case CONTINUE:
      case CPPDECL:
      case CVAR:
      case DEPRECATED:
      case DYNAMIC:
      case ENUMERATOR:
      case EXPERIMENTAL:
      case EXPORT:
      case EXTERNAL:
      case FAR:
      case FAR16:
      case FORWARD:
      case GENERIC:
      case HELPER:
      case IMPLEMENTS:
      case INDEX:
      case INTERRUPT:
      case IOCHECK:
      case LOCAL:
      case MESSAGE:
      case NAME:
      case NEAR:
      case NODEFAULT:
      case NORETURN:
      case NOSTACKFRAME:
      case OLDFPCCALL:
      case OTHERWISE:
      case OVERLOAD:
      case OVERRIDE:
      case PASCAL:
      case PLATFORM:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case PUBLISHED:
      case REGISTER:
      case RESULT:
      case SAFECALL:
      case SAVEREGISTERS:
      case SOFTFLOAT:
      case SPECIALIZE:
      case STATIC:
      case STDCALL:
      case STORED:
      case STRICT:
      case UNALIGNED:
      case UNIMPLEMENTED:
      case VARARGS:
      case VIRTUAL:
      case ASIGNACION:
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case INCR:
      case DECR:
      case LPAREN:
      case RPAREN:
      case LBRACE:
      case RBRACE:
      case ASPAS:
      case LBRACKET:
      case RBRACKET:
      case SEMICOLON:
      case COMMA:
      case DOT:
      case TDOT:
      case EQ:
      case LE:
      case GE:
      case NE:
      case OR:
      case AND:
      case COMENTARIO_SIMPLES:
      case COMENTARIO_MULTIPLAS_LINHAS:
      case TYPES:
      case NUMBER:
      case FLOAT_NUM:
      case IDENTIFIER:
      case CADENA:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROGRAMA:
        jj_consume_token(PROGRAMA);
        break;
      case IF:
        jj_consume_token(IF);
        break;
      case ELSE:
        jj_consume_token(ELSE);
        break;
      case ELSEIF:
        jj_consume_token(ELSEIF);
        break;
      case FOR:
        jj_consume_token(FOR);
        break;
      case SWITCH:
        jj_consume_token(SWITCH);
        break;
      case CASE:
        jj_consume_token(CASE);
        break;
      case BREAK:
        jj_consume_token(BREAK);
        break;
      case DEFAUL:
        jj_consume_token(DEFAUL);
        break;
      case DO:
        jj_consume_token(DO);
        break;
      case WHILE:
        jj_consume_token(WHILE);
        break;
      case WRITELN:
        jj_consume_token(WRITELN);
        break;
      case WRITE:
        jj_consume_token(WRITE);
        break;
      case READ:
        jj_consume_token(READ);
        break;
      case READLN:
        jj_consume_token(READLN);
        break;
      case ARRAY:
        jj_consume_token(ARRAY);
        break;
      case ASM:
        jj_consume_token(ASM);
        break;
      case BEGIN:
        jj_consume_token(BEGIN);
        break;
      case CONST:
        jj_consume_token(CONST);
        break;
      case CONSTRUCTOR:
        jj_consume_token(CONSTRUCTOR);
        break;
      case DESTRUCTOR:
        jj_consume_token(DESTRUCTOR);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      case DOWNTO:
        jj_consume_token(DOWNTO);
        break;
      case END:
        jj_consume_token(END);
        break;
      case FILE:
        jj_consume_token(FILE);
        break;
      case FUNCTION:
        jj_consume_token(FUNCTION);
        break;
      case GOTO:
        jj_consume_token(GOTO);
        break;
      case IMPLENTATION:
        jj_consume_token(IMPLENTATION);
        break;
      case IN:
        jj_consume_token(IN);
        break;
      case INHERITED:
        jj_consume_token(INHERITED);
        break;
      case INLINE:
        jj_consume_token(INLINE);
        break;
      case INTERFACE:
        jj_consume_token(INTERFACE);
        break;
      case LABEL:
        jj_consume_token(LABEL);
        break;
      case MOD:
        jj_consume_token(MOD);
        break;
      case NIL:
        jj_consume_token(NIL);
        break;
      case NOT:
        jj_consume_token(NOT);
        break;
      case OBJECT:
        jj_consume_token(OBJECT);
        break;
      case OF:
        jj_consume_token(OF);
        break;
      case OPERATOR:
        jj_consume_token(OPERATOR);
        break;
      case PACKED:
        jj_consume_token(PACKED);
        break;
      case PROCEDURE:
        jj_consume_token(PROCEDURE);
        break;
      case RECORD:
        jj_consume_token(RECORD);
        break;
      case REINTRODUCE:
        jj_consume_token(REINTRODUCE);
        break;
      case REPEAT:
        jj_consume_token(REPEAT);
        break;
      case SELF:
        jj_consume_token(SELF);
        break;
      case SET:
        jj_consume_token(SET);
        break;
      case SHL:
        jj_consume_token(SHL);
        break;
      case SHR:
        jj_consume_token(SHR);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      case THEN:
        jj_consume_token(THEN);
        break;
      case TO:
        jj_consume_token(TO);
        break;
      case TYPE:
        jj_consume_token(TYPE);
        break;
      case UNIT:
        jj_consume_token(UNIT);
        break;
      case UNTIL:
        jj_consume_token(UNTIL);
        break;
      case USES:
        jj_consume_token(USES);
        break;
      case VAR:
        jj_consume_token(VAR);
        break;
      case WITH:
        jj_consume_token(WITH);
        break;
      case XOR:
        jj_consume_token(XOR);
        break;
      case AS:
        jj_consume_token(AS);
        break;
      case CLASS:
        jj_consume_token(CLASS);
        break;
      case DISPINTERFACE:
        jj_consume_token(DISPINTERFACE);
        break;
      case EXCEPT:
        jj_consume_token(EXCEPT);
        break;
      case EXPORTS:
        jj_consume_token(EXPORTS);
        break;
      case FINALIZATION:
        jj_consume_token(FINALIZATION);
        break;
      case FINALLY:
        jj_consume_token(FINALLY);
        break;
      case INITIALIZATION:
        jj_consume_token(INITIALIZATION);
        break;
      case IS:
        jj_consume_token(IS);
        break;
      case LIBRAY:
        jj_consume_token(LIBRAY);
        break;
      case ON:
        jj_consume_token(ON);
        break;
      case PROPERTY:
        jj_consume_token(PROPERTY);
        break;
      case RAISE:
        jj_consume_token(RAISE);
        break;
      case RESOURCESTRING:
        jj_consume_token(RESOURCESTRING);
        break;
      case THREADVAR:
        jj_consume_token(THREADVAR);
        break;
      case TRY:
        jj_consume_token(TRY);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case ALIAS:
        jj_consume_token(ALIAS);
        break;
      case ASSEMBLER:
        jj_consume_token(ASSEMBLER);
        break;
      case BITPACKED:
        jj_consume_token(BITPACKED);
        break;
      case CDECL:
        jj_consume_token(CDECL);
        break;
      case CONTINUE:
        jj_consume_token(CONTINUE);
        break;
      case CPPDECL:
        jj_consume_token(CPPDECL);
        break;
      case CVAR:
        jj_consume_token(CVAR);
        break;
      case DEPRECATED:
        jj_consume_token(DEPRECATED);
        break;
      case DYNAMIC:
        jj_consume_token(DYNAMIC);
        break;
      case ENUMERATOR:
        jj_consume_token(ENUMERATOR);
        break;
      case EXPERIMENTAL:
        jj_consume_token(EXPERIMENTAL);
        break;
      case EXPORT:
        jj_consume_token(EXPORT);
        break;
      case EXTERNAL:
        jj_consume_token(EXTERNAL);
        break;
      case FAR:
        jj_consume_token(FAR);
        break;
      case FAR16:
        jj_consume_token(FAR16);
        break;
      case FORWARD:
        jj_consume_token(FORWARD);
        break;
      case GENERIC:
        jj_consume_token(GENERIC);
        break;
      case HELPER:
        jj_consume_token(HELPER);
        break;
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        break;
      case INDEX:
        jj_consume_token(INDEX);
        break;
      case INTERRUPT:
        jj_consume_token(INTERRUPT);
        break;
      case IOCHECK:
        jj_consume_token(IOCHECK);
        break;
      case LOCAL:
        jj_consume_token(LOCAL);
        break;
      case MESSAGE:
        jj_consume_token(MESSAGE);
        break;
      case NAME:
        jj_consume_token(NAME);
        break;
      case NEAR:
        jj_consume_token(NEAR);
        break;
      case NODEFAULT:
        jj_consume_token(NODEFAULT);
        break;
      case NORETURN:
        jj_consume_token(NORETURN);
        break;
      case NOSTACKFRAME:
        jj_consume_token(NOSTACKFRAME);
        break;
      case OLDFPCCALL:
        jj_consume_token(OLDFPCCALL);
        break;
      case OTHERWISE:
        jj_consume_token(OTHERWISE);
        break;
      case OVERLOAD:
        jj_consume_token(OVERLOAD);
        break;
      case OVERRIDE:
        jj_consume_token(OVERRIDE);
        break;
      case PASCAL:
        jj_consume_token(PASCAL);
        break;
      case PLATFORM:
        jj_consume_token(PLATFORM);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PUBLISHED:
        jj_consume_token(PUBLISHED);
        break;
      case REGISTER:
        jj_consume_token(REGISTER);
        break;
      case RESULT:
        jj_consume_token(RESULT);
        break;
      case SAFECALL:
        jj_consume_token(SAFECALL);
        break;
      case SAVEREGISTERS:
        jj_consume_token(SAVEREGISTERS);
        break;
      case SOFTFLOAT:
        jj_consume_token(SOFTFLOAT);
        break;
      case SPECIALIZE:
        jj_consume_token(SPECIALIZE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case STDCALL:
        jj_consume_token(STDCALL);
        break;
      case STORED:
        jj_consume_token(STORED);
        break;
      case STRICT:
        jj_consume_token(STRICT);
        break;
      case UNALIGNED:
        jj_consume_token(UNALIGNED);
        break;
      case UNIMPLEMENTED:
        jj_consume_token(UNIMPLEMENTED);
        break;
      case VARARGS:
        jj_consume_token(VARARGS);
        break;
      case VIRTUAL:
        jj_consume_token(VIRTUAL);
        break;
      case ASIGNACION:
        jj_consume_token(ASIGNACION);
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        break;
      case INCR:
        jj_consume_token(INCR);
        break;
      case DECR:
        jj_consume_token(DECR);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        break;
      case RPAREN:
        jj_consume_token(RPAREN);
        break;
      case LBRACE:
        jj_consume_token(LBRACE);
        break;
      case RBRACE:
        jj_consume_token(RBRACE);
        break;
      case ASPAS:
        jj_consume_token(ASPAS);
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        break;
      case RBRACKET:
        jj_consume_token(RBRACKET);
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      case COMMA:
        jj_consume_token(COMMA);
        break;
      case DOT:
        jj_consume_token(DOT);
        break;
      case TDOT:
        jj_consume_token(TDOT);
        break;
      case EQ:
        jj_consume_token(EQ);
        break;
      case LE:
        jj_consume_token(LE);
        break;
      case GE:
        jj_consume_token(GE);
        break;
      case NE:
        jj_consume_token(NE);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      case COMENTARIO_SIMPLES:
        jj_consume_token(COMENTARIO_SIMPLES);
        break;
      case COMENTARIO_MULTIPLAS_LINHAS:
        jj_consume_token(COMENTARIO_MULTIPLAS_LINHAS);
        break;
      case TYPES:
        jj_consume_token(TYPES);
        break;
      case NUMBER:
        jj_consume_token(NUMBER);
        break;
      case FLOAT_NUM:
        jj_consume_token(FLOAT_NUM);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case CADENA:
        jj_consume_token(CADENA);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public trabalho_tokenTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffffff0,0xfffffff0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xffffffff,0xffffffff,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xffffffff,0xffffffff,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0xffffffff,0xffffffff,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0xffffffff,0xffffffff,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0xd,0xd,};
   }

  /** Constructor with InputStream. */
  public trabalho_token(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public trabalho_token(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new trabalho_tokenTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public trabalho_token(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new trabalho_tokenTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public trabalho_token(trabalho_tokenTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(trabalho_tokenTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[166];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 166; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

 }
