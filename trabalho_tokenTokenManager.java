/* Generated By:JavaCC: Do not edit this line. trabalho_tokenTokenManager.java */

/** Token Manager. */
public class trabalho_tokenTokenManager implements trabalho_tokenConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xe00000004000L) != 0L || (active1 & 0xc0000000000c00L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 0;
            return 170;
         }
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 0;
            return 6;
         }
         if ((active2 & 0xcL) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 0;
            return 14;
         }
         if ((active0 & 0xe7ff1ffff7d83b30L) != 0L || (active1 & 0xff3ffffff0fdf3f9L) != 0L || (active2 & 0x3L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 0;
            return 209;
         }
         if ((active2 & 0x200000L) != 0L)
            return 35;
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 0;
            return 108;
         }
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 0;
            return 153;
         }
         if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 0;
            return 210;
         }
         if ((active2 & 0x100L) != 0L)
            return 136;
         if ((active2 & 0x800L) != 0L)
            return 16;
         if ((active0 & 0xc0L) != 0L || (active1 & 0xf000006L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 0;
            return 9;
         }
         if ((active2 & 0x8000L) != 0L)
            return 26;
         if ((active2 & 0x100000L) != 0L)
            return 211;
         return -1;
      case 1:
         if ((active1 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 162;
               jjmatchedPos = 1;
            }
            return 212;
         }
         if ((active0 & 0x4040020f00100000L) != 0L || (active1 & 0xc00010160L) != 0L)
            return 209;
         if ((active2 & 0x4L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 162;
               jjmatchedPos = 1;
            }
            return 213;
         }
         if ((active0 & 0xb7bf1df0f7c83ff0L) != 0L || (active1 & 0xff3ffff3fefef69fL) != 0L || (active2 & 0xbL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 162;
               jjmatchedPos = 1;
            }
            return 209;
         }
         if ((active0 & 0xe00000004000L) != 0L || (active1 & 0xc0000000000800L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 162;
               jjmatchedPos = 1;
            }
            return 169;
         }
         return -1;
      case 2:
         if ((active0 & 0x200e00e000100000L) != 0L || (active1 & 0x30002000L) != 0L)
            return 209;
         if ((active0 & 0x97b1fd1ef7c85fd0L) != 0L || (active1 & 0xffffffffcfffdebfL) != 0L || (active2 & 0xbL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 162;
               jjmatchedPos = 2;
            }
            return 209;
         }
         if ((active2 & 0x4L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 2;
            }
            return 209;
         }
         return -1;
      case 3:
         if ((active0 & 0x15a1000050000000L) != 0L || (active1 & 0x18000200000L) != 0L)
            return 209;
         if ((active0 & 0x8210fd1ea5c85ed0L) != 0L || (active1 & 0xfffffe7fefdfdebfL) != 0L || (active2 & 0xfL) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 3;
            return 209;
         }
         return -1;
      case 4:
         if ((active0 & 0x8200001000000000L) != 0L || (active1 & 0x2420048400L) != 0L)
            return 209;
         if ((active0 & 0x10fd0ea5c85a10L) != 0L || (active1 & 0xfffffe5bcfdb5abfL) != 0L || (active2 & 0xfL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 162;
               jjmatchedPos = 4;
            }
            return 209;
         }
         return -1;
      case 5:
         if ((active0 & 0x10a90400004000L) != 0L || (active1 & 0xd091000104000086L) != 0L)
            return 209;
         if ((active0 & 0x540aa5801a10L) != 0L || (active1 & 0x2f6efe5acbdb5a39L) != 0L || (active2 & 0xfL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 162;
               jjmatchedPos = 5;
            }
            return 209;
         }
         return -1;
      case 6:
         if ((active1 & 0x20040050c0900014L) != 0L || (active2 & 0xcL) != 0L)
            return 209;
         if ((active0 & 0x540aa1801a10L) != 0L || (active1 & 0xf6afe0a0b4b5a29L) != 0L || (active2 & 0x3L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 6;
            return 209;
         }
         return -1;
      case 7:
         if ((active0 & 0x500aa1800a00L) != 0L || (active1 & 0xe283a0a03435829L) != 0L || (active2 & 0x3L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 7;
            return 209;
         }
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x142c40008080200L) != 0L)
            return 209;
         return -1;
      case 8:
         if ((active0 & 0x100a00000000L) != 0L || (active1 & 0x428220800031000L) != 0L || (active2 & 0x1L) != 0L)
            return 209;
         if ((active0 & 0x400081800200L) != 0L || (active1 & 0xa00180203400829L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 8;
            return 209;
         }
         return -1;
      case 9:
         if ((active1 & 0x800100201400000L) != 0L)
            return 209;
         if ((active0 & 0x400081800200L) != 0L || (active1 & 0x200080002000829L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 9;
            return 209;
         }
         return -1;
      case 10:
         if ((active0 & 0x80800200L) != 0L || (active1 & 0x200080002000829L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 10;
            return 209;
         }
         if ((active0 & 0x400000000000L) != 0L)
            return 209;
         return -1;
      case 11:
         if ((active0 & 0x80000000L) != 0L || (active1 & 0x80002000008L) != 0L)
            return 209;
         if ((active0 & 0x200L) != 0L || (active1 & 0x200000000000821L) != 0L || (active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 11;
            return 209;
         }
         return -1;
      case 12:
         if ((active1 & 0x200000000000001L) != 0L || (active2 & 0x2L) != 0L)
            return 209;
         if ((active1 & 0x820L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 12;
            return 209;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000L);
      case 39:
         return jjStartNfaWithStates_0(0, 143, 26);
      case 40:
         return jjStartNfaWithStates_0(0, 139, 16);
      case 41:
         return jjStopAtPos(0, 140);
      case 42:
         return jjStopAtPos(0, 135);
      case 43:
         {
         jjmatchedKind = 133;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200L);
      case 44:
         return jjStopAtPos(0, 147);
      case 45:
         {
         jjmatchedKind = 134;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400L);
      case 46:
         return jjStartNfaWithStates_0(0, 148, 211);
      case 47:
         return jjStartNfaWithStates_0(0, 136, 136);
      case 58:
         return jjStartNfaWithStates_0(0, 149, 35);
      case 59:
         return jjStopAtPos(0, 146);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000L);
      case 61:
         {
         jjmatchedKind = 132;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 144);
      case 93:
         return jjStopAtPos(0, 145);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4000000000180000L, 0x1c000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8000000000c00000L, 0x3c0000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7000000L, 0xc00001L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc0L, 0xf000006L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x30000100L, 0x70000018L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x80000000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xf80001a20L, 0x1e00000060L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x2000000080L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x4000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xc000000000L, 0xf8000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x70000000000L, 0xf00000000100L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x180000000000L, 0x3f000000000200L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0xe00000004000L, 0xc0000000000c00L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1f000000000000L, 0xff00000000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xe0000000000000L, 0x3000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x700000000000000L, 0x0L, 0x3L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xcL);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 141);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000L);
      case 125:
         return jjStopAtPos(0, 142);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 155);
         break;
      case 43:
         if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         break;
      case 45:
         if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         break;
      case 61:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(1, 151);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x81000000600L, active1, 0x301008030000400L, active2, 0x4L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0x4000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x3e00001004000L, active1, 0xc0014180400800L, active2, 0L);
      case 102:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 41, 209);
         return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2c000000000000L, active1, 0x1000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000004012000000L, active1, 0x20099L, active2, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000c0L, active1, 0x2100000008000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0x200000000L, active2, 0L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 72, 209);
         return jjMoveStringLiteralDfa2_0(active0, 0x300000e00000000L, active1, 0xc01000020L, active2, 0x3L);
      case 111:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 54, 209);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000a044c02100L, active1, 0x4000e3040080000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000001000L, active1, 0x800000000100000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000080010L, active1, 0xc000000002200L, active2, 0L);
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 70, 209);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000100000L, active1, 0x10000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000800L, active1, 0xf000200000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0x30000000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc00000200000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xe000006L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0x800000L, active2, 0L);
      case 124:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 154);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(2, 5);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(2, 13);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x1002010000200000L, active2, 0x1L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0x30000000000080L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x280000000000L, active1, 0x3000000002L, active2, 0L);
      case 100:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 209);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000120400000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x420040000000800L, active1, 0x800c00000040000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x500000000000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0x200000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x100400000000000L, active1, 0x4000000008420L, active2, 0x2L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 209);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 209);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000410000200L, active1, 0x100000000L, active2, 0L);
      case 109:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 209);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x20c00000L, active1, 0x80880018L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000010L, active1, 0x4008000000000200L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80800080004000L, active1, 0x206500004L, active2, 0L);
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 209);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 209);
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000081100L, active1, 0x8000040060001000L, active2, 0xcL);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10004c0L, active1, 0x81084000014801L, active2, 0L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 209);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 209);
         return jjMoveStringLiteralDfa3_0(active0, 0x1200000840000000L, active1, 0x808020000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0x200000000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 209);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(3, 8);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(3, 25);
         break;
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0x2000808018L, active2, 0x4L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100020000000L, active1, 0x2801000000040000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 209);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 209);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 209);
         return jjMoveStringLiteralDfa4_0(active0, 0x811a000054c0L, active1, 0x300260c8a011002L, active2, 0L);
      case 102:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 209);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L, active1, 0L, active2, 0L);
      case 104:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 209);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x210000400000000L, active1, 0x8040000000000000L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x30000200000000L, active2, 0x1L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000L, active2, 0x2L);
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 209);
         return jjMoveStringLiteralDfa4_0(active0, 0x400004000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 209);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0x4000804L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100020201L, active2, 0L);
      case 114:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 209);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 104, 209);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000800L, active1, 0x4000c00000400080L, active2, 0L);
      case 115:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 209);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000c00000L, active1, 0x4000000400L, active2, 0L);
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 209);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000200L, active1, 0x140a080000084020L, active2, 0x8L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(4, 10);
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0L, active2, 0L);
      case 54:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 93, 209);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x840000004000L, active1, 0x2005084040021080L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0x8100000000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0L, active2, 0L);
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 209);
         return jjMoveStringLiteralDfa5_0(active0, 0x180080000200L, active1, 0x4008001301500200L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x402020000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1830000000080021L, active2, 0x1L);
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 209);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 209);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 209);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 209);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80400000000018L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0x810000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000400000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000002L, active2, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x200a01000010L, active1, 0x200a0088e004004L, active2, 0x4L);
      case 115:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 209);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 209);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x400024c00000L, active1, 0x40000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L, active2, 0x8L);
      case 120:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 209);
         break;
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(5, 19);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(5, 22);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x10L, active1, 0x900020000004020L, active2, 0x8L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 99:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 116, 209);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 124, 209);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8181000520000L, active2, 0L);
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 209);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 209);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 126, 209);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0x1000L, active2, 0L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 209);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0x200000000000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 103:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 209);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000L, active2, 0x5L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x220000880L, active1, 0x800082800008L, active2, 0L);
      case 108:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 112, 209);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2400000000000010L, active2, 0x2L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0x8080001L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0x2400000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 209);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000800200L, active1, 0x841000a00L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 209);
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 209);
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 119, 209);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 127, 209);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000004000L, active1, 0x44000000000004L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0x40000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 121:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 209);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(6, 14);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 26);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0x400009400000L, active2, 0L);
      case 99:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 87, 209);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 95, 209);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0x100000004800L, active2, 0L);
      case 100:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 94, 209);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 101:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 102, 209);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 114, 209);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000200000000L, active2, 0x2L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x1080L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 107:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 100, 209);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000020000L, active2, 0L);
      case 108:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 84, 209);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 125, 209);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 131, 209);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x900000000010020L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x10L, active1, 0x2000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0xa00L, active1, 0L, active2, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x440020000000L, active1, 0x400000000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2040000000000L, active2, 0L);
      case 115:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 209);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 130, 209);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x280000000L, active1, 0x8000000000201L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000800000L, active1, 0x20800080000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 121:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 209);
         break;
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(7, 4);
         else if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(7, 7);
         else if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(7, 12);
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000a00L, active1, 0x400100000001008L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800800000L, active1, 0L, active2, 0L);
      case 100:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 110, 209);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 101:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 83, 209);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 111, 209);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0x28000002030801L, active2, 0x1L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xa00000000000020L, active2, 0L);
      case 108:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 91, 209);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 120, 209);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 109:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 113, 209);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 110:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 106, 209);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L, active1, 0x200000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 209);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 118, 209);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0x1404000L, active2, 0L);
      case 121:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 73, 209);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(8, 11);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(8, 29);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(8, 78);
         break;
      case 100:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 209);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 81, 209);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 115, 209);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 117, 209);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 128, 209);
         break;
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 35, 209);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 209);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 109, 209);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000L, active2, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L, active1, 0x1000000L, active2, 0L);
      case 114:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 76, 209);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 80, 209);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000001L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000000800L, active2, 0L);
      case 116:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 99, 209);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 105, 209);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 122, 209);
         return jjMoveStringLiteralDfa9_0(active0, 0x80800200L, active1, 0x200000008L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000000020L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000020L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 86, 209);
         break;
      case 101:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 123, 209);
         break;
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000200L, active1, 0x8L, active2, 0L);
      case 108:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 108, 209);
         break;
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 114:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 88, 209);
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(9, 97, 209);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000002000800L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(10, 24);
         break;
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000001L, active2, 0L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 46, 209);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000L, active1, 0x8L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L, active1, 0x800L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20L, active2, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0x200L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(11, 23);
         break;
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x200L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 101:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 107, 209);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x820L, active2, 0L);
      case 108:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(11, 89, 209);
         break;
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(11, 31, 209);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(11, 67, 209);
         break;
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(12, 9);
         break;
      case 100:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(12, 129, 209);
         break;
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(12, 64, 209);
         break;
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 115:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 121, 209);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 103:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(13, 75, 209);
         break;
      case 110:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(13, 69, 209);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 209;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x3ff800200000000L & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  break;
               case 211:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  else if ((0x8400c00200000000L & l) != 0L)
                  {
                     if (kind > 163)
                        kind = 163;
                     jjCheckNAdd(35);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 160)
                        kind = 160;
                     jjCheckNAdd(46);
                  }
                  break;
               case 213:
                  if ((0x3ff800200000000L & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  break;
               case 169:
                  if ((0x3ff800200000000L & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  break;
               case 170:
                  if ((0x3ff800200000000L & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  break;
               case 212:
                  if ((0x3ff800200000000L & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  break;
               case 209:
                  if ((0x3ff800200000000L & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  break;
               case 6:
                  if ((0x3ff800200000000L & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  break;
               case 0:
                  if ((0x3ff800200000000L & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 46)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 39)
                     jjAddStates(6, 7);
                  else if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 16;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 15);
                  else if ((0x8400c00200000000L & l) != 0L)
                  {
                     if (kind > 163)
                        kind = 163;
                     jjCheckNAdd(35);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x3fe000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 47)
                     jjAddStates(16, 18);
                  break;
               case 210:
                  if ((0x3ff800200000000L & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x8400c00200000000L & l) != 0L)
                  {
                     if (kind > 163)
                        kind = 163;
                     jjCheckNAdd(35);
                  }
                  break;
               case 26:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 14:
                  if ((0x3ff800200000000L & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  break;
               case 136:
                  if ((0x3ff800200000000L & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  else if (curChar == 42)
                     jjCheckNAddTwoStates(142, 143);
                  if ((0x8400c00200000000L & l) != 0L)
                  {
                     if (kind > 163)
                        kind = 163;
                     jjCheckNAdd(35);
                  }
                  if (curChar == 47)
                  {
                     if (kind > 156)
                        kind = 156;
                     jjCheckNAdd(146);
                  }
                  if (curChar == 47)
                     jjCheckNAddStates(19, 21);
                  break;
               case 153:
                  if ((0x3ff800200000000L & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  break;
               case 108:
                  if ((0x3ff800200000000L & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  break;
               case 1:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 16:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 17:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 42)
                     jjCheckNAddStates(22, 24);
                  break;
               case 19:
               case 20:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(20, 18);
                  break;
               case 21:
                  if (curChar == 41 && kind > 157)
                     kind = 157;
                  break;
               case 22:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 23:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 39)
                     jjAddStates(6, 7);
                  break;
               case 27:
                  if (curChar == 39 && kind > 161)
                     kind = 161;
                  break;
               case 29:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 27);
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 32:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 34:
                  if ((0x3ff800200000000L & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if ((0x8400c00200000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAdd(35);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  break;
               case 40:
                  jjCheckNAddStates(3, 5);
                  break;
               case 41:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 42:
                  if (curChar == 34 && kind > 165)
                     kind = 165;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 15);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar == 46)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 160)
                     kind = 160;
                  jjCheckNAdd(46);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 48:
                  if (curChar != 46)
                     break;
                  if (kind > 160)
                     kind = 160;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 160)
                     kind = 160;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 51:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 160)
                     kind = 160;
                  jjCheckNAdd(55);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 160)
                     kind = 160;
                  jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 160)
                     kind = 160;
                  jjCheckNAdd(61);
                  break;
               case 62:
                  if (curChar == 46)
                     jjCheckNAddStates(0, 2);
                  break;
               case 135:
                  if (curChar == 47)
                     jjAddStates(16, 18);
                  break;
               case 137:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 138:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 139:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 140:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(142, 143);
                  break;
               case 142:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(142, 143);
                  break;
               case 143:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 144:
                  if (curChar == 47 && kind > 3)
                     kind = 3;
                  break;
               case 145:
                  if (curChar != 47)
                     break;
                  if (kind > 156)
                     kind = 156;
                  jjCheckNAdd(146);
                  break;
               case 146:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 156)
                     kind = 156;
                  jjCheckNAdd(146);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 110)
                     jjCheckNAdd(8);
                  break;
               case 211:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  else if (curChar == 95)
                  {
                     if (kind > 163)
                        kind = 163;
                     jjCheckNAdd(35);
                  }
                  break;
               case 213:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 114)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  break;
               case 169:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 173;
                  if (curChar == 97)
                     jjCheckNAdd(168);
                  break;
               case 170:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 174;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 212:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 100)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  break;
               case 209:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 163)
                        kind = 163;
                     jjCheckNAdd(35);
                  }
                  if (curChar == 66)
                     jjAddStates(25, 27);
                  else if (curChar == 82)
                     jjAddStates(28, 33);
                  else if (curChar == 114)
                     jjAddStates(34, 35);
                  else if (curChar == 87)
                     jjAddStates(36, 37);
                  else if (curChar == 119)
                     jjAddStates(38, 39);
                  else if (curChar == 86)
                     jjAddStates(40, 41);
                  else if (curChar == 76)
                     jjAddStates(42, 43);
                  else if (curChar == 67)
                     jjAddStates(44, 45);
                  else if (curChar == 73)
                     jjAddStates(46, 47);
                  else if (curChar == 83)
                     jjAddStates(48, 51);
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 210:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if (curChar == 95)
                  {
                     if (kind > 163)
                        kind = 163;
                     jjCheckNAdd(35);
                  }
                  break;
               case 26:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(27);
                  else if (curChar == 92)
                     jjAddStates(52, 54);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 97)
                     jjCheckNAdd(13);
                  break;
               case 136:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if (curChar == 95)
                  {
                     if (kind > 163)
                        kind = 163;
                     jjCheckNAdd(35);
                  }
                  break;
               case 153:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 156;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 108:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 162)
                        kind = 162;
                     jjCheckNAdd(34);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 164)
                        kind = 164;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 114;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 3:
                  if (curChar == 110 && kind > 21)
                     kind = 21;
                  break;
               case 4:
               case 194:
                  if (curChar == 105)
                     jjCheckNAdd(3);
                  break;
               case 5:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 100 && kind > 27)
                     kind = 27;
                  break;
               case 10:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 110)
                     jjCheckNAdd(8);
                  break;
               case 12:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 114 && kind > 59)
                     kind = 59;
                  break;
               case 15:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(20, 18);
                  break;
               case 20:
                  jjCheckNAddTwoStates(20, 18);
                  break;
               case 28:
                  if (curChar == 92)
                     jjAddStates(52, 54);
                  break;
               case 29:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 162)
                     kind = 162;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if (curChar != 95)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAdd(37);
                  break;
               case 39:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  jjCheckNAddStates(3, 5);
                  break;
               case 41:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 59:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 63:
                  if (curChar == 83)
                     jjAddStates(48, 51);
                  break;
               case 64:
                  if (curChar == 103 && kind > 158)
                     kind = 158;
                  break;
               case 65:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 116 && kind > 158)
                     kind = 158;
                  break;
               case 70:
               case 117:
                  if (curChar == 110)
                     jjCheckNAdd(69);
                  break;
               case 71:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 71 && kind > 158)
                     kind = 158;
                  break;
               case 77:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 84 && kind > 158)
                     kind = 158;
                  break;
               case 82:
               case 122:
                  if (curChar == 78)
                     jjCheckNAdd(81);
                  break;
               case 83:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 73)
                     jjAddStates(46, 47);
                  break;
               case 89:
                  if (curChar == 114 && kind > 158)
                     kind = 158;
                  break;
               case 90:
               case 102:
                  if (curChar == 101)
                     jjCheckNAdd(89);
                  break;
               case 91:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 82 && kind > 158)
                     kind = 158;
                  break;
               case 96:
               case 109:
                  if (curChar == 69)
                     jjCheckNAdd(95);
                  break;
               case 97:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 67)
                     jjAddStates(44, 45);
                  break;
               case 103:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 110:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 76)
                     jjAddStates(42, 43);
                  break;
               case 118:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 123:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 86)
                     jjAddStates(40, 41);
                  break;
               case 132:
                  if (curChar == 97)
                     jjCheckNAdd(13);
                  break;
               case 133:
                  if (curChar == 82 && kind > 59)
                     kind = 59;
                  break;
               case 134:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 137:
                  jjAddStates(19, 21);
                  break;
               case 142:
                  jjAddStates(55, 56);
                  break;
               case 146:
                  if (kind > 156)
                     kind = 156;
                  jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 147:
                  if (curChar == 119)
                     jjAddStates(38, 39);
                  break;
               case 148:
                  if (curChar == 110 && kind > 15)
                     kind = 15;
                  break;
               case 149:
               case 159:
                  if (curChar == 108)
                     jjCheckNAdd(148);
                  break;
               case 150:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 154:
                  if (curChar == 101 && kind > 16)
                     kind = 16;
                  break;
               case 155:
               case 164:
                  if (curChar == 116)
                     jjCheckNAdd(154);
                  break;
               case 156:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 87)
                     jjAddStates(36, 37);
                  break;
               case 160:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 165:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if (curChar == 114)
                     jjAddStates(34, 35);
                  break;
               case 168:
                  if (curChar == 100 && kind > 17)
                     kind = 17;
                  break;
               case 171:
                  if (curChar == 110 && kind > 18)
                     kind = 18;
                  break;
               case 172:
               case 179:
                  if (curChar == 108)
                     jjCheckNAdd(171);
                  break;
               case 173:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 82)
                     jjAddStates(28, 33);
                  break;
               case 177:
                  if (curChar == 97)
                     jjCheckNAdd(168);
                  break;
               case 178:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 180:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if (curChar == 108 && kind > 158)
                     kind = 158;
                  break;
               case 184:
               case 186:
                  if (curChar == 97)
                     jjCheckNAdd(183);
                  break;
               case 185:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 187:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if (curChar == 76 && kind > 158)
                     kind = 158;
                  break;
               case 189:
               case 191:
                  if (curChar == 65)
                     jjCheckNAdd(188);
                  break;
               case 190:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 192:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if (curChar == 66)
                     jjAddStates(25, 27);
                  break;
               case 195:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
                  if (curChar == 110 && kind > 158)
                     kind = 158;
                  break;
               case 198:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 203:
                  if (curChar == 78 && kind > 158)
                     kind = 158;
                  break;
               case 204:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 26:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(20, 18);
                  break;
               case 40:
               case 41:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 137:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(19, 21);
                  break;
               case 142:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 146:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 156)
                     kind = 156;
                  jjstateSet[jjnewStateCnt++] = 146;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 209 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   46, 52, 53, 39, 41, 42, 26, 28, 44, 45, 47, 48, 50, 51, 56, 57, 
   136, 141, 145, 137, 138, 140, 18, 19, 21, 196, 202, 208, 178, 182, 185, 187, 
   190, 192, 170, 175, 163, 166, 153, 157, 132, 134, 121, 130, 108, 115, 94, 100, 
   68, 75, 80, 87, 29, 30, 32, 142, 143, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\120\162\157\147\162\141\155\40", "\151\146\40", 
"\145\154\163\145\40", "\145\154\163\145\40\151\146\40", "\146\157\162\40", 
"\151\141\154\164\145\162\156\141\164\151\166\141\40", "\103\141\163\145\40", "\151\164\145\162\155\151\156\141\40", 
"\151\160\162\145\144\145\146\40", "\104\157\40", "\162\145\160\145\141\164\40", null, null, null, null, 
"\141\162\162\141\171\40", "\141\163\155", null, "\143\157\156\163\164\40", 
"\143\157\156\163\164\162\165\143\164\157\162\40", "\144\145\163\164\162\165\143\164\157\162\40", "\144\151\166\40", 
"\144\157\167\156\164\157\40", null, "\146\151\154\145", "\146\165\156\143\164\151\157\156\40", 
"\147\157\164\157", "\151\155\160\154\145\156\164\141\164\151\157\156", "\151\156", 
"\151\156\150\145\162\151\164\145\144", "\151\156\154\151\156\145", "\151\156\164\145\162\146\141\143\145", 
"\154\141\142\145\154", "\155\157\144", "\156\151\154", "\156\157\164", "\157\142\152\145\143\164", 
"\157\146", "\157\160\145\162\141\164\157\162", "\160\141\143\153\145\144", 
"\160\162\157\143\145\144\165\162\145", "\162\145\143\157\162\144", "\162\145\151\156\164\162\157\144\165\143\145", 
"\162\145\160\145\141\164", "\163\145\154\146", "\163\145\164", "\163\150\154", "\163\150\162", 
"\163\164\162\151\156\147", "\164\150\145\156", "\164\157", "\164\171\160\145", "\165\156\151\164", 
"\165\156\164\151\154", "\165\163\145\163", null, "\167\151\164\150", "\170\157\162", "\141\163", 
"\143\154\141\163\163", "\144\151\163\160\151\156\164\145\162\146\141\143\145", 
"\145\170\143\145\160\164", "\145\170\160\157\162\164\163", 
"\146\151\156\141\154\151\172\141\164\151\157\156", "\146\151\156\141\154\154\171", 
"\151\156\151\164\151\141\154\151\172\141\164\151\157\156", "\151\163", "\154\151\142\162\141\171", "\157\156", 
"\160\162\157\160\145\162\164\171", "\162\141\151\163\145", 
"\162\145\163\157\165\162\143\145\163\164\162\151\156\147", "\164\150\162\145\141\144\166\141\162", "\164\162\171", 
"\141\142\163\164\162\141\143\164\40", "\141\154\151\141\163", "\141\163\163\145\155\142\154\145\162", 
"\142\151\164\160\141\143\153\145\144", "\143\144\145\143\154", "\143\157\156\164\151\156\165\145", 
"\143\160\160\144\145\143\154", "\143\166\141\162", "\144\145\160\162\145\143\141\164\145\144", 
"\144\171\156\141\155\151\143", "\145\156\165\155\145\162\141\164\157\162", 
"\145\170\160\145\162\151\155\145\156\164\141\154", "\145\170\160\157\162\164", "\145\170\164\145\162\156\141\154", 
"\146\141\162", "\146\141\162\61\66", "\146\157\162\167\141\162\144", 
"\147\145\156\145\162\151\143", "\150\145\154\160\145\162", "\151\155\160\154\145\155\145\156\164\163", 
"\151\156\144\145\170", "\151\156\164\145\162\162\165\160\164", "\151\157\143\150\145\143\153", 
"\154\157\143\141\154", "\155\145\163\163\141\147\145", "\156\141\155\145", "\156\145\141\162", 
"\156\157\144\145\146\141\165\154\164", "\156\157\162\145\164\165\162\156", 
"\156\157\163\164\141\143\153\146\162\141\155\145", "\157\154\144\146\160\143\143\141\154\154", 
"\157\164\150\145\162\167\151\163\145", "\157\166\145\162\154\157\141\144", "\157\166\145\162\162\151\144\145", 
"\160\141\163\143\141\154", "\160\154\141\164\146\157\162\155", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\160\165\142\154\151\163\150\145\144", 
"\162\145\147\151\163\164\145\162", "\162\145\163\165\154\164", "\163\141\146\145\143\141\154\154", 
"\163\141\166\145\162\145\147\151\163\164\145\162\163", "\163\157\146\164\146\154\157\141\164", 
"\163\160\145\143\151\141\154\151\172\145", "\163\164\141\164\151\143", "\163\164\144\143\141\154\154", 
"\163\164\157\162\145\144", "\163\164\162\151\143\164", "\165\156\141\154\151\147\156\145\144", 
"\165\156\151\155\160\154\145\155\145\156\164\145\144", "\166\141\162\141\162\147\163", "\166\151\162\164\165\141\154", "\75", "\53", 
"\55", "\52", "\57", "\53\53", "\55\55", "\50", "\51", "\173", "\175", "\47", "\133", 
"\135", "\73", "\54", "\56", "\72", "\75\75", "\74\75", "\76\75", "\41\75", 
"\174\174", "\46\46", null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffff1L, 0xffffffffffffffffL, 0x3fffffffffL, 
};
static final long[] jjtoSkip = {
   0xeL, 0x0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[209];
static private final int[] jjstateSet = new int[418];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public trabalho_tokenTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public trabalho_tokenTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 209; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   jjmatchedKind = 162;
   jjmatchedPos = -1;
   curPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static int[] jjemptyLineNo = new int[1];
static int[] jjemptyColNo = new int[1];
static boolean[] jjbeenHere = new boolean[1];
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 0 :
         break;
      case 4 :
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
                                 System.out.println("Program -> "+image);
         break;
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
                       System.out.println("IF -> "+image);
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
                          System.out.println("ELSE -> "+image);
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
                               System.out.println("ELSE IF -> "+image);
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                        System.out.println("for -> "+image);
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                                    System.out.println("SWITCH -> "+image);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                          System.out.println("CASE -> "+image);
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                               System.out.println("BREAK -> "+image);
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                               System.out.println("DEFAUL -> "+image);
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                      System.out.println("DO -> "+image);
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                             System.out.println("WHILE -> "+image);
         break;
      case 15 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                         System.out.println("WRITELN -> "+image);
         break;
      case 16 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   System.out.println("WRITE -> "+image);
         break;
      case 17 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                System.out.println("READ -> "+image);
         break;
      case 18 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                      System.out.println("READLN -> "+image);
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                            System.out.println("ARRAY -> "+image);
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                       System.out.println("ASM -> "+image);
         break;
      case 21 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   System.out.println("BEGIN -> "+image);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                            System.out.println("CONST -> "+image);
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                                        System.out.println("CONSTRUCTOR -> "+image);
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                                      System.out.println("DESTRUCTOR -> "+image);
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                        System.out.println("DIV -> "+image);
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                              System.out.println("DOWNTO -> "+image);
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.println("END -> "+image);
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
                         System.out.println("FILE -> "+image);
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
                                  System.out.println("FUNCTION -> "+image);
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
                          System.out.println("GOTO -> "+image);
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
                                         System.out.println("IMPLENTATION -> "+image);
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
                     System.out.println("IN -> "+image);
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
                                   System.out.println("INHERITED -> "+image);
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
                             System.out.println("INLINE -> "+image);
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
                                   System.out.println("INTERFACE -> "+image);
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                           System.out.println("LABEL -> "+image);
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                       System.out.println("MOD -> "+image);
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                       System.out.println("NIL -> "+image);
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                       System.out.println("NOT -> "+image);
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                             System.out.println("OBJECT -> "+image);
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                     System.out.println("OF -> "+image);
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                                  System.out.println("OPERATOR -> "+image);
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                             System.out.println("PACKED -> "+image);
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
                                   System.out.println("PROCEDURE -> "+image);
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
                             System.out.println("RECORD -> "+image);
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
                                       System.out.println("REINTRODUCE -> "+image);
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
                             System.out.println("REPEAT -> "+image);
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                         System.out.println("SELF -> "+image);
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
                       System.out.println("SET -> "+image);
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
                       System.out.println("SHL -> "+image);
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
                       System.out.println("SHR -> "+image);
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
                             System.out.println("STRING -> "+image);
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
                          System.out.println("THEN -> "+image);
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
                     System.out.println("TO -> "+image);
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
                         System.out.println("TYPE -> "+image);
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
                         System.out.println("UNIT -> "+image);
         break;
      case 57 :
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
                           System.out.println("UNTIL -> "+image);
         break;
      case 58 :
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
                         System.out.println("USES -> "+image);
         break;
      case 59 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                      System.out.println("VAR -> "+image);
         break;
      case 60 :
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
                         System.out.println("WITH -> "+image);
         break;
      case 61 :
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
                       System.out.println("XOR -> "+image);
         break;
      case 62 :
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
                     System.out.println("AS -> "+image);
         break;
      case 63 :
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
                           System.out.println("CLASS -> "+image);
         break;
      case 64 :
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
                                           System.out.println("DISPINTERFACE -> "+image);
         break;
      case 65 :
        image.append(jjstrLiteralImages[65]);
        lengthOfMatch = jjstrLiteralImages[65].length();
                              System.out.println("EXCEPT -> "+image);
         break;
      case 66 :
        image.append(jjstrLiteralImages[66]);
        lengthOfMatch = jjstrLiteralImages[66].length();
                               System.out.println("EXPORT -> "+image);
         break;
      case 67 :
        image.append(jjstrLiteralImages[67]);
        lengthOfMatch = jjstrLiteralImages[67].length();
                                         System.out.println("FINALIZATION -> "+image);
         break;
      case 68 :
        image.append(jjstrLiteralImages[68]);
        lengthOfMatch = jjstrLiteralImages[68].length();
                               System.out.println("FINALLY -> "+image);
         break;
      case 69 :
        image.append(jjstrLiteralImages[69]);
        lengthOfMatch = jjstrLiteralImages[69].length();
                                             System.out.println("INITIALIZATION -> "+image);
         break;
      case 70 :
        image.append(jjstrLiteralImages[70]);
        lengthOfMatch = jjstrLiteralImages[70].length();
                     System.out.println("IS -> "+image);
         break;
      case 71 :
        image.append(jjstrLiteralImages[71]);
        lengthOfMatch = jjstrLiteralImages[71].length();
                             System.out.println("LIBRAY -> "+image);
         break;
      case 72 :
        image.append(jjstrLiteralImages[72]);
        lengthOfMatch = jjstrLiteralImages[72].length();
                     System.out.println("ON -> "+image);
         break;
      case 73 :
        image.append(jjstrLiteralImages[73]);
        lengthOfMatch = jjstrLiteralImages[73].length();
                                 System.out.println("PROPERTY -> "+image);
         break;
      case 74 :
        image.append(jjstrLiteralImages[74]);
        lengthOfMatch = jjstrLiteralImages[74].length();
                           System.out.println("RAISE -> "+image);
         break;
      case 75 :
        image.append(jjstrLiteralImages[75]);
        lengthOfMatch = jjstrLiteralImages[75].length();
                                             System.out.println("RESOURCESTRING -> "+image);
         break;
      case 76 :
        image.append(jjstrLiteralImages[76]);
        lengthOfMatch = jjstrLiteralImages[76].length();
                                   System.out.println("THREADVAR -> "+image);
         break;
      case 77 :
        image.append(jjstrLiteralImages[77]);
        lengthOfMatch = jjstrLiteralImages[77].length();
                        System.out.println("TRY -> "+image);
         break;
      case 78 :
        image.append(jjstrLiteralImages[78]);
        lengthOfMatch = jjstrLiteralImages[78].length();
                                  System.out.println("ABSTRACT -> "+image);
         break;
      case 79 :
        image.append(jjstrLiteralImages[79]);
        lengthOfMatch = jjstrLiteralImages[79].length();
                           System.out.println("ALIAS -> "+image);
         break;
      case 80 :
        image.append(jjstrLiteralImages[80]);
        lengthOfMatch = jjstrLiteralImages[80].length();
                                   System.out.println("ASSEMBLER -> "+image);
         break;
      case 81 :
        image.append(jjstrLiteralImages[81]);
        lengthOfMatch = jjstrLiteralImages[81].length();
                                   System.out.println("BITPACKED -> "+image);
         break;
      case 82 :
        image.append(jjstrLiteralImages[82]);
        lengthOfMatch = jjstrLiteralImages[82].length();
                           System.out.println("CDECL -> "+image);
         break;
      case 83 :
        image.append(jjstrLiteralImages[83]);
        lengthOfMatch = jjstrLiteralImages[83].length();
                                 System.out.println("CONTINUE -> "+image);
         break;
      case 84 :
        image.append(jjstrLiteralImages[84]);
        lengthOfMatch = jjstrLiteralImages[84].length();
                               System.out.println("CPPDECL -> "+image);
         break;
      case 85 :
        image.append(jjstrLiteralImages[85]);
        lengthOfMatch = jjstrLiteralImages[85].length();
                         System.out.println("CVAR -> "+image);
         break;
      case 86 :
        image.append(jjstrLiteralImages[86]);
        lengthOfMatch = jjstrLiteralImages[86].length();
                                     System.out.println("DEPRECATED -> "+image);
         break;
      case 87 :
        image.append(jjstrLiteralImages[87]);
        lengthOfMatch = jjstrLiteralImages[87].length();
                               System.out.println("DYNAMIC -> "+image);
         break;
      case 88 :
        image.append(jjstrLiteralImages[88]);
        lengthOfMatch = jjstrLiteralImages[88].length();
                                     System.out.println("ENUMERATOR -> "+image);
         break;
      case 89 :
        image.append(jjstrLiteralImages[89]);
        lengthOfMatch = jjstrLiteralImages[89].length();
                                          System.out.println("EXPERIMENTAL -> "+image);
         break;
      case 90 :
        image.append(jjstrLiteralImages[90]);
        lengthOfMatch = jjstrLiteralImages[90].length();
                             System.out.println("EXPORT -> "+image);
         break;
      case 91 :
        image.append(jjstrLiteralImages[91]);
        lengthOfMatch = jjstrLiteralImages[91].length();
                                 System.out.println("EXTERNAL -> "+image);
         break;
      case 92 :
        image.append(jjstrLiteralImages[92]);
        lengthOfMatch = jjstrLiteralImages[92].length();
                       System.out.println("FAR -> "+image);
         break;
      case 93 :
        image.append(jjstrLiteralImages[93]);
        lengthOfMatch = jjstrLiteralImages[93].length();
                           System.out.println("FAR16 -> "+image);
         break;
      case 94 :
        image.append(jjstrLiteralImages[94]);
        lengthOfMatch = jjstrLiteralImages[94].length();
                               System.out.println("FORWARD -> "+image);
         break;
      case 95 :
        image.append(jjstrLiteralImages[95]);
        lengthOfMatch = jjstrLiteralImages[95].length();
                               System.out.println("GENERIC -> "+image);
         break;
      case 96 :
        image.append(jjstrLiteralImages[96]);
        lengthOfMatch = jjstrLiteralImages[96].length();
                             System.out.println("HELPER -> "+image);
         break;
      case 97 :
        image.append(jjstrLiteralImages[97]);
        lengthOfMatch = jjstrLiteralImages[97].length();
                                     System.out.println("IMPLEMENTS -> "+image);
         break;
      case 98 :
        image.append(jjstrLiteralImages[98]);
        lengthOfMatch = jjstrLiteralImages[98].length();
                           System.out.println("INDEX -> "+image);
         break;
      case 99 :
        image.append(jjstrLiteralImages[99]);
        lengthOfMatch = jjstrLiteralImages[99].length();
                                   System.out.println("INTERRUPT -> "+image);
         break;
      case 100 :
        image.append(jjstrLiteralImages[100]);
        lengthOfMatch = jjstrLiteralImages[100].length();
                               System.out.println("IOCHECK -> "+image);
         break;
      case 101 :
        image.append(jjstrLiteralImages[101]);
        lengthOfMatch = jjstrLiteralImages[101].length();
                            System.out.println("LOCAL -> "+image);
         break;
      case 102 :
        image.append(jjstrLiteralImages[102]);
        lengthOfMatch = jjstrLiteralImages[102].length();
                               System.out.println("MESSAGE -> "+image);
         break;
      case 103 :
        image.append(jjstrLiteralImages[103]);
        lengthOfMatch = jjstrLiteralImages[103].length();
                         System.out.println("NAME -> "+image);
         break;
      case 104 :
        image.append(jjstrLiteralImages[104]);
        lengthOfMatch = jjstrLiteralImages[104].length();
                         System.out.println("NEAR -> "+image);
         break;
      case 105 :
        image.append(jjstrLiteralImages[105]);
        lengthOfMatch = jjstrLiteralImages[105].length();
                                   System.out.println("NODEFAULT -> "+image);
         break;
      case 106 :
        image.append(jjstrLiteralImages[106]);
        lengthOfMatch = jjstrLiteralImages[106].length();
                                 System.out.println("NORETURN -> "+image);
         break;
      case 107 :
        image.append(jjstrLiteralImages[107]);
        lengthOfMatch = jjstrLiteralImages[107].length();
                                         System.out.println("NOSTACKFRAME -> "+image);
         break;
      case 108 :
        image.append(jjstrLiteralImages[108]);
        lengthOfMatch = jjstrLiteralImages[108].length();
                                     System.out.println("OLDFPCCALL -> "+image);
         break;
      case 109 :
        image.append(jjstrLiteralImages[109]);
        lengthOfMatch = jjstrLiteralImages[109].length();
                                   System.out.println("OTHERWISE -> "+image);
         break;
      case 110 :
        image.append(jjstrLiteralImages[110]);
        lengthOfMatch = jjstrLiteralImages[110].length();
                                 System.out.println("OVERLOAD -> "+image);
         break;
      case 111 :
        image.append(jjstrLiteralImages[111]);
        lengthOfMatch = jjstrLiteralImages[111].length();
                                 System.out.println("OVERRIDE -> "+image);
         break;
      case 112 :
        image.append(jjstrLiteralImages[112]);
        lengthOfMatch = jjstrLiteralImages[112].length();
                             System.out.println("PASCAL -> "+image);
         break;
      case 113 :
        image.append(jjstrLiteralImages[113]);
        lengthOfMatch = jjstrLiteralImages[113].length();
                                  System.out.println("PLATFORM -> "+image);
         break;
      case 114 :
        image.append(jjstrLiteralImages[114]);
        lengthOfMatch = jjstrLiteralImages[114].length();
                               System.out.println("PRIVATE -> "+image);
         break;
      case 115 :
        image.append(jjstrLiteralImages[115]);
        lengthOfMatch = jjstrLiteralImages[115].length();
                                   System.out.println("PROTECTED -> "+image);
         break;
      case 116 :
        image.append(jjstrLiteralImages[116]);
        lengthOfMatch = jjstrLiteralImages[116].length();
                             System.out.println("PUBLIC -> "+image);
         break;
      case 117 :
        image.append(jjstrLiteralImages[117]);
        lengthOfMatch = jjstrLiteralImages[117].length();
                                   System.out.println("PUBLISHED -> "+image);
         break;
      case 118 :
        image.append(jjstrLiteralImages[118]);
        lengthOfMatch = jjstrLiteralImages[118].length();
                                 System.out.println("REGISTER -> "+image);
         break;
      case 119 :
        image.append(jjstrLiteralImages[119]);
        lengthOfMatch = jjstrLiteralImages[119].length();
                             System.out.println("RESULT -> "+image);
         break;
      case 120 :
        image.append(jjstrLiteralImages[120]);
        lengthOfMatch = jjstrLiteralImages[120].length();
                                 System.out.println("SAFECALL -> "+image);
         break;
      case 121 :
        image.append(jjstrLiteralImages[121]);
        lengthOfMatch = jjstrLiteralImages[121].length();
                                           System.out.println("SAVEREGISTERS -> "+image);
         break;
      case 122 :
        image.append(jjstrLiteralImages[122]);
        lengthOfMatch = jjstrLiteralImages[122].length();
                                   System.out.println("SOFTFLOAT -> "+image);
         break;
      case 123 :
        image.append(jjstrLiteralImages[123]);
        lengthOfMatch = jjstrLiteralImages[123].length();
                                     System.out.println("SPECIALIZE -> "+image);
         break;
      case 124 :
        image.append(jjstrLiteralImages[124]);
        lengthOfMatch = jjstrLiteralImages[124].length();
                             System.out.println("STATIC -> "+image);
         break;
      case 125 :
        image.append(jjstrLiteralImages[125]);
        lengthOfMatch = jjstrLiteralImages[125].length();
                                System.out.println("STDCALL -> "+image);
         break;
      case 126 :
        image.append(jjstrLiteralImages[126]);
        lengthOfMatch = jjstrLiteralImages[126].length();
                             System.out.println("STORED -> "+image);
         break;
      case 127 :
        image.append(jjstrLiteralImages[127]);
        lengthOfMatch = jjstrLiteralImages[127].length();
                             System.out.println("STRICT -> "+image);
         break;
      case 128 :
        image.append(jjstrLiteralImages[128]);
        lengthOfMatch = jjstrLiteralImages[128].length();
                                   System.out.println("UNALIGNED -> "+image);
         break;
      case 129 :
        image.append(jjstrLiteralImages[129]);
        lengthOfMatch = jjstrLiteralImages[129].length();
                                           System.out.println("UNIMPLEMENTED -> "+image);
         break;
      case 130 :
        image.append(jjstrLiteralImages[130]);
        lengthOfMatch = jjstrLiteralImages[130].length();
                               System.out.println("VARARGS -> "+image);
         break;
      case 131 :
        image.append(jjstrLiteralImages[131]);
        lengthOfMatch = jjstrLiteralImages[131].length();
                               System.out.println("VIRTUAL -> "+image);
         break;
      case 132 :
        image.append(jjstrLiteralImages[132]);
        lengthOfMatch = jjstrLiteralImages[132].length();
                              System.out.println("ATRIBUI\u00c7\u00c3O -> "+image);
         break;
      case 133 :
        image.append(jjstrLiteralImages[133]);
        lengthOfMatch = jjstrLiteralImages[133].length();
                         System.out.println("SOMA -> "+image);
         break;
      case 134 :
        image.append(jjstrLiteralImages[134]);
        lengthOfMatch = jjstrLiteralImages[134].length();
                      System.out.println("SUBTRA\u00c7\u00c3O -> "+image);
         break;
      case 135 :
        image.append(jjstrLiteralImages[135]);
        lengthOfMatch = jjstrLiteralImages[135].length();
                         System.out.println("MULTIPLICA\u00c7\u00c3O -> "+image);
         break;
      case 136 :
        image.append(jjstrLiteralImages[136]);
        lengthOfMatch = jjstrLiteralImages[136].length();
                       System.out.println("DIVIS\u00c3O -> "+image);
         break;
      case 137 :
        image.append(jjstrLiteralImages[137]);
        lengthOfMatch = jjstrLiteralImages[137].length();
                        System.out.println("INCREMENTO -> "+image);
         break;
      case 138 :
        image.append(jjstrLiteralImages[138]);
        lengthOfMatch = jjstrLiteralImages[138].length();
                        System.out.println("DECREMENTO -> "+image);
         break;
      case 139 :
        image.append(jjstrLiteralImages[139]);
        lengthOfMatch = jjstrLiteralImages[139].length();
                     System.out.println("IPAREN -> "+image);
         break;
      case 140 :
        image.append(jjstrLiteralImages[140]);
        lengthOfMatch = jjstrLiteralImages[140].length();
                         System.out.println("DPAREN -> "+image);
         break;
      case 141 :
        image.append(jjstrLiteralImages[141]);
        lengthOfMatch = jjstrLiteralImages[141].length();
                         System.out.println("ILLAVE -> "+image);
         break;
      case 142 :
        image.append(jjstrLiteralImages[142]);
        lengthOfMatch = jjstrLiteralImages[142].length();
                         System.out.println("DLLAVE -> "+image);
         break;
      case 143 :
        image.append(jjstrLiteralImages[143]);
        lengthOfMatch = jjstrLiteralImages[143].length();
                        System.out.println("ASPAS -> "+image);
         break;
      case 144 :
        image.append(jjstrLiteralImages[144]);
        lengthOfMatch = jjstrLiteralImages[144].length();
                           System.out.println("LBRACKET -> "+image);
         break;
      case 145 :
        image.append(jjstrLiteralImages[145]);
        lengthOfMatch = jjstrLiteralImages[145].length();
                           System.out.println("RBRACKET -> "+image);
         break;
      case 146 :
        image.append(jjstrLiteralImages[146]);
        lengthOfMatch = jjstrLiteralImages[146].length();
                            System.out.println("PONTO E VIRGULA -> "+image);
         break;
      case 147 :
        image.append(jjstrLiteralImages[147]);
        lengthOfMatch = jjstrLiteralImages[147].length();
                        System.out.println("VIRGULA -> "+image);
         break;
      case 148 :
        image.append(jjstrLiteralImages[148]);
        lengthOfMatch = jjstrLiteralImages[148].length();
                      System.out.println("PONTO -> "+image);
         break;
      case 149 :
        image.append(jjstrLiteralImages[149]);
        lengthOfMatch = jjstrLiteralImages[149].length();
                       System.out.println("DOIS PONTOS -> "+image);
         break;
      case 150 :
        image.append(jjstrLiteralImages[150]);
        lengthOfMatch = jjstrLiteralImages[150].length();
                      System.out.println("IGUALDADE -> "+image);
         break;
      case 151 :
        image.append(jjstrLiteralImages[151]);
        lengthOfMatch = jjstrLiteralImages[151].length();
                      System.out.println("MENOR OU IGUAL -> "+image);
         break;
      case 152 :
        image.append(jjstrLiteralImages[152]);
        lengthOfMatch = jjstrLiteralImages[152].length();
                      System.out.println("MAIOR OU IGUAL -> "+image);
         break;
      case 153 :
        image.append(jjstrLiteralImages[153]);
        lengthOfMatch = jjstrLiteralImages[153].length();
                      System.out.println("DIFERENTE -> "+image);
         break;
      case 154 :
        image.append(jjstrLiteralImages[154]);
        lengthOfMatch = jjstrLiteralImages[154].length();
                      System.out.println("OR -> "+image);
         break;
      case 155 :
        image.append(jjstrLiteralImages[155]);
        lengthOfMatch = jjstrLiteralImages[155].length();
                      System.out.println("AND -> "+image);
         break;
      case 156 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                              System.out.print("COMENTARIO_SIMPLES "+image+"\u005cr\u005cn");
         break;
      case 157 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                              System.out.print("COMENTARIO_MULTIPLAS_LINHAS "+image+"\u005cr\u005cn");
         break;
      case 158 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                                                                                              System.out.println("TYPEVAR -> "+image);
         break;
      case 159 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                             System.out.print("NUM "+image+"\u005cr\u005cn");
         break;
      case 160 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                                                                        System.out.print("FLOAT_NUM  -> "+image+"\u005cr\u005cn");
         break;
      case 161 :
         break;
      case 162 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[0] &&
                jjemptyLineNo[0] == input_stream.getBeginLine() &&
                jjemptyColNo[0] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[0] = input_stream.getBeginLine();
            jjemptyColNo[0] = input_stream.getBeginColumn();
            jjbeenHere[0] = true;
         }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                      System.out.print("IDENTIFICADOR -> "+image+"\u005cr\u005cn");
         break;
      case 163 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                   System.out.print("CADENA -> "+image+"\u005cr\u005cn");
         break;
      case 164 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                 System.out.print("ID -> "+image+"\u005cr\u005cn");
         break;
      case 165 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            System.out.print("QUOTED -> "+image+"\u005cr\u005cn");
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
